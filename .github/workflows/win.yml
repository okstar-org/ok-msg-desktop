# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on Windows platforms

permissions:
  contents: write
  discussions: write

on:
  push:
    branches: [ "develop" ]
    tags:
      - "v*.*.*"
  pull_request:
    branches: [ "develop" ]

jobs:
  build:
    env:
      ARTIFACT_PATH: "ok-msg-desktop"
      UPLOAD_ARTIFACT: "true"
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.arch }}-windows
      ARTIFACT_Setup_Path: "${{ github.workspace }}/deploy-setup"
      ARTIFACT_Setup_FileName: "ok-msg-desktop_${{ matrix.os }}_${{ matrix.arch }}_setup"

    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        arch: [x64]
        os: [windows-latest]
        build_type: [Release]
        c_compiler: [cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl

    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v3
      with:
        submodules: 'true'

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        arch: ${{ matrix.arch == 'x64' && 'win64_msvc2019_64' || 'win32_msvc2019' }}

    - name: Native Tools Command Prompt.
      uses: ilammy/msvc-dev-cmd@v1.10.0
      with:
        arch: ${{ matrix.arch }}

    - name: vcpkg build
      uses: lukka/run-vcpkg@v11

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake for windows
      if: matrix.os == 'windows-latest'
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake"
        -DVCPKG_TARGET_TRIPLET=${{ env.VCPKG_DEFAULT_TRIPLET }}
        -A ${{ matrix.arch == 'x64' && 'x64' || 'win32' }}
        -S ${{ github.workspace }}


    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Move artifact.
      if: env.UPLOAD_ARTIFACT == 'true'
      run: |
        mkdir ${{ env.ARTIFACT_PATH }}
        cp ${{ steps.strings.outputs.build-output-dir }}\src\${{ matrix.build_type }}\ok-msg-desktop.exe ${{ env.ARTIFACT_PATH }}
        xcopy build\vcpkg_installed\${{ env.VCPKG_DEFAULT_TRIPLET }}\bin\*.dll ${{ env.ARTIFACT_PATH }}
        xcopy "$env:Qt5_Dir\bin\*.dll" ${{ env.ARTIFACT_PATH }}
        Copy-Item -Recurse $env:Qt5_Dir\plugins ${{ env.ARTIFACT_PATH }}
        xcopy LICENSE ${{ env.ARTIFACT_PATH }}

    - name: Compile .ISS to .EXE Installer
      uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
      with:
        path: inno-setup-script.iss

    - name: Move setup binary.
      if: env.UPLOAD_ARTIFACT == 'true'
      run: |
        mv ${{ env.ARTIFACT_Setup_Path}}\${{ env.ARTIFACT_Setup_FileName }}.exe ${{ env.ARTIFACT_PATH }}

    - name: Upload setup binary to release.
      uses: softprops/action-gh-release@v1
      if: ${{ startsWith(github.ref, 'refs/tags/') }}
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        files: |
          ${{ env.ARTIFACT_PATH }}/${{ env.ARTIFACT_Setup_FileName }}.exe

    - name: Delete setup binary in the origin package release. 
      if: env.UPLOAD_ARTIFACT == 'true'
      run: |
        rm ${{ env.ARTIFACT_PATH }}\${{ env.ARTIFACT_Setup_FileName }}.exe 

    - name: Archive Release
      uses: thedoctor0/zip-release@0.7.5
      with:
        type: 'zip'
        path: ${{ env.ARTIFACT_PATH }}
        filename: ok-msg-desktop_${{ matrix.os }}_${{ matrix.arch }}.zip

    - name: Upload artifact.
      uses: actions/upload-artifact@master
      if: env.UPLOAD_ARTIFACT == 'true'
      with:
        name: ok-msg-desktop_${{matrix.arch}}_${{ matrix.arch }}
        path: ${{ env.ARTIFACT_PATH }}

    - name: Upload binaries to release
      uses: softprops/action-gh-release@v1
      if: ${{ startsWith(github.ref, 'refs/tags/') }}
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        files: |
          ok-msg-desktop_${{ matrix.os }}_${{ matrix.arch }}.zip
